PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE gpkg_spatial_ref_sys (
srs_name TEXT NOT NULL,
srs_id INTEGER NOT NULL PRIMARY KEY,
organization TEXT NOT NULL,
organization_coordsys_id INTEGER NOT NULL,
definition TEXT NOT NULL,
description TEXT
);
INSERT INTO gpkg_spatial_ref_sys VALUES('Undefined Cartesian',-1,'NONE',-1,'Undefined',NULL);
INSERT INTO gpkg_spatial_ref_sys VALUES('Undefined Geographic',0,'NONE',0,'Undefined',NULL);
INSERT INTO gpkg_spatial_ref_sys VALUES('WGS84',4326,'epsg',4326,'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]]',NULL);
CREATE TABLE gpkg_contents (
table_name TEXT NOT NULL PRIMARY KEY,
data_type TEXT NOT NULL,
identifier TEXT UNIQUE,
description TEXT DEFAULT '',
last_change TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ',CURRENT_TIMESTAMP)),
min_x DOUBLE,
min_y DOUBLE,
max_x DOUBLE,
max_y DOUBLE,
srs_id INTEGER,
CONSTRAINT fk_gc_r_srid FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys(srs_id));
INSERT INTO gpkg_contents VALUES('pt2d','features','pt2d',' ','2014-05-22T09:02:13.902Z',1.1000000000000000888,1.1000000000000000888,1.6000000000000000888,2.5,4326);
INSERT INTO gpkg_contents VALUES('pt2dm','features','pt2dm',' ','2014-05-22T09:02:14.211Z',1.1000000000000000888,1.1000000000000000888,1.6000000000000000888,1.3000000000000000444,4326);
INSERT INTO gpkg_contents VALUES('pt3dz','features','pt3dz',' ','2014-05-22T09:02:14.643Z',1.6000000000000000888,1.1999999999999999555,2.6000000000000000888,2.2000000000000001776,4326);
INSERT INTO gpkg_contents VALUES('pt3dzm','features','pt3dzm',' ','2014-05-22T09:02:14.912Z',1.6000000000000000888,2.2000000000000001776,5.5999999999999996447,3.2000000000000001776,4326);
INSERT INTO gpkg_contents VALUES('ln2d','features','ln2d',' ','2014-05-22T09:02:15.189Z',0.0,0.0,10.0,10.0,4326);
INSERT INTO gpkg_contents VALUES('ln2dm','features','ln2dm',' ','2014-05-22T09:02:15.535Z',0.0,0.0,5.0,5.0,4326);
INSERT INTO gpkg_contents VALUES('ln3dz','features','ln3dz',' ','2014-05-22T09:02:16.028Z',0.0,0.0,10.0,10.0,4326);
INSERT INTO gpkg_contents VALUES('ln3dzm','features','ln3dzm',' ','2014-05-22T09:02:16.375Z',0.0,0.0,10.0,10.0,4326);
INSERT INTO gpkg_contents VALUES('pg2d','features','pg2d',' ','2014-05-22T09:02:16.674Z',0.0,0.0,15.0,5.0,4326);
INSERT INTO gpkg_contents VALUES('pg2dm','features','pg2dm',' ','2014-05-22T09:02:16.968Z',0.0,0.0,15.0,5.0,4326);
INSERT INTO gpkg_contents VALUES('pg3dz','features','pg3dz',' ','2014-05-22T09:02:17.284Z',0.0,0.0,15.0,5.0,4326);
INSERT INTO gpkg_contents VALUES('pg3dzm','features','pg3dzm',' ','2014-05-22T09:02:17.552Z',0.0,0.0,15.0,5.0,4326);
INSERT INTO gpkg_contents VALUES('mpg3dzm','features','mpg3dzm',' ','2014-05-22T09:02:17.992Z',20.0,20.0,32.0,32.0,4326);
INSERT INTO gpkg_contents VALUES('mpg3dz','features','mpg3dz',' ','2014-05-22T09:02:18.210Z',20.0,20.0,32.0,32.0,4326);
INSERT INTO gpkg_contents VALUES('mpg2dm','features','mpg2dm',' ','2014-05-22T09:02:18.478Z',20.0,20.0,32.0,32.0,4326);
INSERT INTO gpkg_contents VALUES('mpg2d','features','mpg2d',' ','2014-05-22T09:02:18.692Z',20.0,20.0,32.0,32.0,4326);
INSERT INTO gpkg_contents VALUES('mln2d','features','mln2d',' ','2014-05-22T09:02:18.960Z',5.0,5.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('mln2dm','features','mln2dm',' ','2014-05-22T09:02:19.179Z',5.0,5.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('mln3dz','features','mln3dz',' ','2014-05-22T09:02:19.546Z',5.0,5.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('mln3dzm','features','mln3dzm',' ','2014-05-22T09:02:19.774Z',5.0,5.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('mpt3dzm','features','mpt3dzm',' ','2014-05-22T09:02:19.937Z',5.0,5.0,20.0,20.0,4326);
INSERT INTO gpkg_contents VALUES('mpt3dz','features','mpt3dz',' ','2014-05-22T09:02:20.158Z',5.0,5.0,20.0,20.0,4326);
INSERT INTO gpkg_contents VALUES('mpt2dm','features','mpt2dm',' ','2014-05-22T09:02:20.501Z',5.0,5.0,20.0,20.0,4326);
INSERT INTO gpkg_contents VALUES('mpt2d','features','mpt2d',' ','2014-05-22T09:02:20.751Z',5.0,5.0,20.0,20.0,4326);
INSERT INTO gpkg_contents VALUES('gc2d','features','gc2d',' ','2014-05-22T09:02:21.071Z',1.0,2.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('gc2dm','features','gc2dm',' ','2014-05-22T09:02:21.232Z',1.0,2.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('gc3dz','features','gc3dz',' ','2014-05-22T09:02:21.398Z',1.0,2.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('gc3dzm','features','gc3dzm',' ','2014-05-22T09:02:21.704Z',1.0,2.0,22.0,22.0,4326);
INSERT INTO gpkg_contents VALUES('geo3dzm','features','geo3dzm',' ','2014-05-22T09:02:21.920Z',10.0,4.0,30.999999999999999999,30.999999999999999999,4326);
INSERT INTO gpkg_contents VALUES('geo3dz','features','geo3dz',' ','2014-05-22T09:02:22.201Z',10.0,4.0,30.999999999999999999,30.999999999999999999,4326);
INSERT INTO gpkg_contents VALUES('geo2dm','features','geo2dm',' ','2014-05-22T09:02:22.368Z',10.0,4.0,30.999999999999999999,30.999999999999999999,4326);
INSERT INTO gpkg_contents VALUES('geo2d','features','geo2d',' ','2014-05-22T09:02:22.625Z',10.0,4.0,30.999999999999999999,30.999999999999999999,4326);
INSERT INTO gpkg_contents VALUES('test_pk','features','test_pk',' ','2014-05-22T09:02:22.751Z',0.0,0.0,12.999999999999999999,9.0,4326);
CREATE TABLE gpkg_geometry_columns (
table_name TEXT NOT NULL,
column_name TEXT,
geometry_type_name TEXT,
srs_id INTEGER NOT NULL,
z INTEGER NOT NULL,
m TINYINT NOT NULL,
CONSTRAINT pk_geom_cols PRIMARY KEY (table_name, column_name),
CONSTRAINT uk_gc_table_name UNIQUE (table_name),
CONSTRAINT fk_gc_tn FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name),
CONSTRAINT fk_gc_srs FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys (srs_id));
INSERT INTO gpkg_geometry_columns VALUES('pt2d','geom','POINT',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('pt2dm','geom','POINT',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('pt3dz','geom','POINT',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('pt3dzm','geom','POINT',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('ln2d','geom','LINESTRING',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('ln2dm','geom','LINESTRING',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('ln3dz','geom','LINESTRING',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('ln3dzm','geom','LINESTRING',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('pg2d','geom','POLYGON',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('pg2dm','geom','POLYGON',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('pg3dz','geom','POLYGON',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('pg3dzm','geom','POLYGON',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('mpg3dzm','geom','MULTIPOLYGON',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('mpg3dz','geom','MULTIPOLYGON',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('mpg2dm','geom','MULTIPOLYGON',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('mpg2d','geom','MULTIPOLYGON',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('mln2d','geom','MULTILINESTRING',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('mln2dm','geom','MULTILINESTRING',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('mln3dz','geom','MULTILINESTRING',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('mln3dzm','geom','MULTILINESTRING',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('mpt3dzm','geom','MULTIPOINT',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('mpt3dz','geom','MULTIPOINT',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('mpt2dm','geom','MULTIPOINT',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('mpt2d','geom','MULTIPOINT',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('gc2d','geom','GEOMCOLLECTION',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('gc2dm','geom','GEOMCOLLECTION',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('gc3dz','geom','GEOMCOLLECTION',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('gc3dzm','geom','GEOMCOLLECTION',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('geo3dzm','geom','GEOMETRY',4326,1,1);
INSERT INTO gpkg_geometry_columns VALUES('geo3dz','geom','GEOMETRY',4326,1,0);
INSERT INTO gpkg_geometry_columns VALUES('geo2dm','geom','GEOMETRY',4326,0,1);
INSERT INTO gpkg_geometry_columns VALUES('geo2d','geom','GEOMETRY',4326,0,0);
INSERT INTO gpkg_geometry_columns VALUES('test_pk','geom','GEOMETRY',4326,0,0);
CREATE TABLE gpkg_tile_matrix_set (
table_name TEXT NOT NULL PRIMARY KEY,
srs_id INTEGER NOT NULL,
min_x DOUBLE NOT NULL,
min_y DOUBLE NOT NULL,
max_x DOUBLE NOT NULL,
max_y DOUBLE NOT NULL,
CONSTRAINT fk_gtms_table_name FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name),
CONSTRAINT fk_gtms_srs FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys (srs_id));
CREATE TABLE gpkg_tile_matrix (
table_name TEXT NOT NULL,
zoom_level INTEGER NOT NULL,
matrix_width INTEGER NOT NULL,
matrix_height INTEGER NOT NULL,
tile_width INTEGER NOT NULL,
tile_height INTEGER NOT NULL,
pixel_x_size DOUBLE NOT NULL,
pixel_y_size DOUBLE NOT NULL,
CONSTRAINT pk_ttm PRIMARY KEY (table_name, zoom_level),
CONSTRAINT fk_tmm_table_name FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name));
CREATE TABLE gpkg_data_columns (
table_name TEXT NOT NULL,
column_name TEXT NOT NULL,
name TEXT,
title TEXT,
description TEXT,
mime_type TEXT,
constraint_name TEXT,
CONSTRAINT pk_gdc PRIMARY KEY (table_name, column_name),
CONSTRAINT fk_gdc_tn FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name));
CREATE TABLE gpkg_data_column_constraints (
constraint_name TEXT NOT NULL,
constraint_type TEXT NOT NULL,
value TEXT,
min NUMERIC,
minIsInclusive BOOLEAN,
max NUMERIC,
maxIsInclusive BOOLEAN,
CONSTRAINT gdcc_ntv UNIQUE (constraint_name, constraint_type, value));
CREATE TABLE gpkg_metadata (
id INTEGER CONSTRAINT m_pk PRIMARY KEY ASC NOT NULL UNIQUE,
md_scope TEXT NOT NULL DEFAULT 'dataset',
md_standard_uri TEXT NOT NULL,
mime_type TEXT NOT NULL DEFAULT 'text/xml',
metadata TEXT NOT NULL);
CREATE TABLE gpkg_metadata_reference (
reference_scope TEXT NOT NULL,
table_name TEXT,
column_name TEXT,
row_id_value INTEGER,
timestamp DATETIME NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ',CURRENT_TIMESTAMP)),
md_file_id INTEGER NOT NULL,
md_parent_id INTEGER,
CONSTRAINT crmr_mfi_fk FOREIGN KEY (md_file_id) REFERENCES gpkg_metadata(id),
CONSTRAINT crmr_mpi_fk FOREIGN KEY (md_parent_id) REFERENCES gpkg_metadata(id));
CREATE TABLE gpkg_extensions (
table_name TEXT,
column_name TEXT,
extension_name TEXT NOT NULL,
definition TEXT NOT NULL,
scope TEXT NOT NULL,
CONSTRAINT ge_tce UNIQUE (table_name, column_name, extension_name));
INSERT INTO gpkg_extensions VALUES('pt2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('pt2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('pt3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('pt3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pt3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('ln2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('ln2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('ln3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('ln3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('ln3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('pg2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('pg2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('pg3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('pg3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('pg3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpg3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpg3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpg2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpg2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpg2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mln2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mln2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mln3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mln3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mln3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpt3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpt3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpt2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('mpt2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('mpt2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('gc2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('gc2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('gc3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('gc3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('gc3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('geo3dzm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo3dzm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo3dzm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('geo3dz','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo3dz','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo3dz','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('geo2dm','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo2dm','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo2dm','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('geo2d','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo2d','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('geo2d','geom','gpkg_rtree_index','GeoPackage 1.0 Specification Annex L','write-only');
INSERT INTO gpkg_extensions VALUES('test_pk','geom','gpkg_geometry_type_trigger','GeoPackage 1.0 Specification Annex N','write-only');
INSERT INTO gpkg_extensions VALUES('test_pk','geom','gpkg_srs_id_trigger','GeoPackage 1.0 Specification Annex N','write-only');
CREATE TABLE IF NOT EXISTS "pt2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pt2d" PRIMARY KEY ("id"));
INSERT INTO pt2d VALUES(1,'alpha',X'47500003e61000009a9999999999f13f9a9999999999f13f9a9999999999f13f9a9999999999f13f01010000009a9999999999f13f9a9999999999f13f');
INSERT INTO pt2d VALUES(2,'beta',X'47500003e61000009a9999999999f93f9a9999999999f93fcdcccccccccc0040cdcccccccccc004001010000009a9999999999f93fcdcccccccccc0040');
INSERT INTO pt2d VALUES(3,'gamma',X'47500003e61000009a9999999999f93f9a9999999999f93f0000000000000440000000000000044001010000009a9999999999f93f0000000000000440');
INSERT INTO pt2d VALUES(4,'delta',NULL);
PRAGMA writable_schema=ON;
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pt2d_geom','rtree_pt2d_geom',0,'CREATE VIRTUAL TABLE "rtree_pt2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pt2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pt2d_geom_node VALUES(1,X'0000000300000000000000013f8ccccc3f8ccccd3f8ccccc3f8ccccd00000000000000023fcccccb3fcccccd400666664006666700000000000000033fcccccb3fcccccd
CREATE TABLE IF NOT EXISTS "rtree_pt2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pt2d_geom_rowid VALUES(1,1);
INSERT INTO rtree_pt2d_geom_rowid VALUES(2,1);
INSERT INTO rtree_pt2d_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pt2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "pt2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pt2dm" PRIMARY KEY ("id"));
INSERT INTO pt2dm VALUES(0,'alpha',X'47500003e61000009a9999999999f93f9a9999999999f93f333333333333f33f333333333333f33f01d10700009a9999999999f93f333333333333f33f0000000000002240');
INSERT INTO pt2dm VALUES(1,'delta',NULL);
INSERT INTO pt2dm VALUES(2,'beta',X'47500003e6100000cdccccccccccf43fcdccccccccccf43fcdccccccccccf43fcdccccccccccf43f01d1070000cdccccccccccf43fcdccccccccccf43f0000000000002640');
INSERT INTO pt2dm VALUES(3,'gamma',X'47500003e61000009a9999999999f13f9a9999999999f13f9a9999999999f13f9a9999999999f13f01d10700009a9999999999f13f9a9999999999f13f0000000000002440');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pt2dm_geom','rtree_pt2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_pt2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pt2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pt2dm_geom_node VALUES(1,X'0000000300000000000000003fcccccb3fcccccd3f9999983f99999a00000000000000023fa666663fa666683fa666663fa6666800000000000000033f8ccccc3f8ccccd3f8ccccc3f8ccccd
CREATE TABLE IF NOT EXISTS "rtree_pt2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pt2dm_geom_rowid VALUES(0,1);
INSERT INTO rtree_pt2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_pt2dm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pt2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "pt3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pt3dz" PRIMARY KEY ("id"));
INSERT INTO pt3dz VALUES(1,'alpha',X'47500003e61000009a9999999999f93f9a9999999999f93f333333333333f33f333333333333f33f01e90300009a9999999999f93f333333333333f33f0000000000002240');
INSERT INTO pt3dz VALUES(2,'beta',X'47500003e61000009a9999999999f93f9a9999999999f93f9a999999999901409a9999999999014001e90300009a9999999999f93f9a999999999901400000000000002a40');
INSERT INTO pt3dz VALUES(3,'gamma',X'47500003e6100000cdcccccccccc0440cdcccccccccc04409a999999999901409a9999999999014001e9030000cdcccccccccc04409a999999999901400000000000002640');
INSERT INTO pt3dz VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pt3dz_geom','rtree_pt3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_pt3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pt3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pt3dz_geom_node VALUES(1,X'0000000300000000000000013fcccccb3fcccccd3f9999983f99999a00000000000000023fcccccb3fcccccd400ccccc400ccccd00000000000000034026666640266668400ccccc400ccccd
CREATE TABLE IF NOT EXISTS "rtree_pt3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pt3dz_geom_rowid VALUES(1,1);
INSERT INTO rtree_pt3dz_geom_rowid VALUES(2,1);
INSERT INTO rtree_pt3dz_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pt3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "pt3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pt3dzm" PRIMARY KEY ("id"));
INSERT INTO pt3dzm VALUES(1,'alpha',X'47500003e6100000cdcccccccccc0440cdcccccccccc04409a999999999901409a9999999999014001b90b0000cdcccccccccc04409a9999999999014000000000000026400000000000000040');
INSERT INTO pt3dzm VALUES(2,'beta',X'47500003e61000009a9999999999f93f9a9999999999f93f9a999999999909409a9999999999094001b90b00009a9999999999f93f9a999999999909400000000000001c400000000000001440');
INSERT INTO pt3dzm VALUES(3,'gamma',X'47500003e6100000666666666666164066666666666616409a999999999909409a9999999999094001b90b000066666666666616409a9999999999094000000000000000400000000000000040');
INSERT INTO pt3dzm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pt3dzm_geom','rtree_pt3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_pt3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pt3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pt3dzm_geom_node VALUES(1,X'0000000300000000000000014026666640266668400ccccc400ccccd00000000000000023fcccccb3fcccccd404ccccb404ccccd000000000000000340b3333340b33335404ccccb404ccccd
CREATE TABLE IF NOT EXISTS "rtree_pt3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pt3dzm_geom_rowid VALUES(1,1);
INSERT INTO rtree_pt3dzm_geom_rowid VALUES(2,1);
INSERT INTO rtree_pt3dzm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pt3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "ln2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_ln2d" PRIMARY KEY ("id"));
INSERT INTO ln2d VALUES(0,'alpha',X'47500003e6100000000000000000f03f0000000000000040000000000000f03f0000000000000040010200000002000000000000000000f03f000000000000f03f00000000000000400000000000000040');
INSERT INTO ln2d VALUES(1,'beta',X'47500003e6100000000000000000f03f0000000000002440000000000000f03f00000000000024400102000000030000000000000000002440000000000000f03f00000000000024400000000000002440000000000000f03f0000000000002440');
INSERT INTO ln2d VALUES(2,'gamma',X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f01020000000200000000000000000000000000000000000000000000000000f03f000000000000f03f');
INSERT INTO ln2d VALUES(3,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_ln2d_geom','rtree_ln2d_geom',0,'CREATE VIRTUAL TABLE "rtree_ln2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_ln2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_ln2d_geom_node VALUES(1,X'0000000300000000000000003f800000400000003f8000004000000000000000000000013f800000412000003f800000412000000000000000000002000000003f800000000000003f
CREATE TABLE IF NOT EXISTS "rtree_ln2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_ln2d_geom_rowid VALUES(0,1);
INSERT INTO rtree_ln2d_geom_rowid VALUES(1,1);
INSERT INTO rtree_ln2d_geom_rowid VALUES(2,1);
CREATE TABLE IF NOT EXISTS "rtree_ln2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "ln2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_ln2dm" PRIMARY KEY ("id"));
INSERT INTO ln2dm VALUES(1,'alpha',X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f01d207000002000000000000000000000000000000000000000000000000002440000000000000f03f000000000000f03f0000000000002240');
INSERT INTO ln2dm VALUES(2,'beta',X'47500003e6100000000000000000000000000000000014400000000000000000000000000000144001d2070000030000000000000000001440000000000000f03f0000000000000840000000000000144000000000000014400000000000001440000000000000000000000000000000000000000000000040');
INSERT INTO ln2dm VALUES(3,'gamma',X'47500003e6100000000000000000e03f333333333333e33f000000000000e03f333333333333e33f01d207000002000000000000000000e03f000000000000e03f0000000000002440333333333333e33f333333333333e33f0000000000001c40');
INSERT INTO ln2dm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_ln2dm_geom','rtree_ln2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_ln2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_ln2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_ln2dm_geom_node VALUES(1,X'000000030000000000000001000000003f800000000000003f80000000000000000000020000000040a000000000000040a0000000000000000000033f0000003f19999a3f0000003f19999a
CREATE TABLE IF NOT EXISTS "rtree_ln2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_ln2dm_geom_rowid VALUES(1,1);
INSERT INTO rtree_ln2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_ln2dm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_ln2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "ln3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_ln3dz" PRIMARY KEY ("id"));
INSERT INTO ln3dz VALUES(0,'alpha',X'47500003e6100000000000000000e03f333333333333e33f000000000000e03f333333333333e33f01ea03000002000000000000000000e03f000000000000e03f0000000000002440333333333333e33f333333333333e33f0000000000001c40');
INSERT INTO ln3dz VALUES(1,'beta',X'47500003e6100000000000000000104000000000000018400000000000001440000000000000244001ea03000003000000000000000000144000000000000014400000000000002440000000000000184000000000000018400000000000002040000000000000104000000000000024400000000000000040');
INSERT INTO ln3dz VALUES(2,'gamma',X'47500003e6100000000000000000000000000000000024400000000000000000000000000000244001ea0300000200000000000000000024400000000000000000000000000000f03f000000000000000000000000000024400000000000001440');
INSERT INTO ln3dz VALUES(3,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_ln3dz_geom','rtree_ln3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_ln3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_ln3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_ln3dz_geom_node VALUES(1,X'0000000300000000000000003f0000003f19999a3f0000003f19999a00000000000000014080000040c0000040a
CREATE TABLE IF NOT EXISTS "rtree_ln3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_ln3dz_geom_rowid VALUES(0,1);
INSERT INTO rtree_ln3dz_geom_rowid VALUES(1,1);
INSERT INTO rtree_ln3dz_geom_rowid VALUES(2,1);
CREATE TABLE IF NOT EXISTS "rtree_ln3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "ln3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_ln3dzm" PRIMARY KEY ("id"));
INSERT INTO ln3dzm VALUES(0,'alpha',X'47500003e6100000000000000000000000000000000024400000000000000000000000000000244001ba0b00000200000000000000000000000000000000000000000000000000f03f00000000000000400000000000002440000000000000244000000000000014400000000000001040');
INSERT INTO ln3dzm VALUES(1,'beta',X'47500003e6100000000000000000000000000000000024400000000000000000000000000000244001ba0b00000300000000000000000000000000000000000000000000000000f03f000000000000004000000000000024400000000000000000000000000000084000000000000014400000000000002440000000000000244000000000000014400000000000001040');
INSERT INTO ln3dzm VALUES(2,'gamma',X'47500003e6100000000000000000000000000000000024400000000000000000000000000000244001ba0b00000200000000000000000024400000000000000000000000000000f03f00000000000010400000000000000000000000000000244000000000000000400000000000001440');
INSERT INTO ln3dzm VALUES(3,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_ln3dzm_geom','rtree_ln3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_ln3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_ln3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_ln3dzm_geom_node VALUES(1,X'000000030000000000000000000000004120000000000000412000000000000000000001000000004120000000000000412000000000000000000002000000004120000000000000412000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
CREATE TABLE IF NOT EXISTS "rtree_ln3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_ln3dzm_geom_rowid VALUES(0,1);
INSERT INTO rtree_ln3dzm_geom_rowid VALUES(1,1);
INSERT INTO rtree_ln3dzm_geom_rowid VALUES(2,1);
CREATE TABLE IF NOT EXISTS "rtree_ln3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "pg2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pg2d" PRIMARY KEY ("id"));
INSERT INTO pg2d VALUES(1,'alpha',X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f0103000000010000000500000000000000000000000000000000000000000000000000f03f0000000000000000000000000000f03f000000000000f03f0000000000000000000000000000f03f00000000000000000000000000000000');
INSERT INTO pg2d VALUES(2,'beta',X'47500003e610000000000000000028400000000000002a400000000000000040000000000000084001030000000100000004000000000000000000284000000000000000400000000000002a4000000000000000400000000000002a40000000000000084000000000000028400000000000000040');
INSERT INTO pg2d VALUES(3,'gamma',X'47500003e610000000000000000024400000000000002e400000000000000000000000000000144001030000000200000005000000000000000000244000000000000000000000000000002e4000000000000000000000000000002e400000000000001440000000000000244000000000000014400000000000002440000000000000000004000000000000000000284000000000000000400000000000002a4000000000000000400000000000002a40000000000000084000000000000028400000000000000040');
INSERT INTO pg2d VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pg2d_geom','rtree_pg2d_geom',0,'CREATE VIRTUAL TABLE "rtree_pg2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pg2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pg2d_geom_node VALUES(1,X'000000030000000000000001000000003f800000000000003f800000000000000000000241400000415000004000000040400000000000000000000341200000417000000000000040a
CREATE TABLE IF NOT EXISTS "rtree_pg2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pg2d_geom_rowid VALUES(1,1);
INSERT INTO rtree_pg2d_geom_rowid VALUES(2,1);
INSERT INTO rtree_pg2d_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pg2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "pg2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pg2dm" PRIMARY KEY ("id"));
INSERT INTO pg2dm VALUES(1,'alpha',X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f01d30700000100000005000000000000000000000000000000000000000000000000001440000000000000f03f00000000000000000000000000001840000000000000f03f000000000000f03f00000000000014400000000000000000000000000000f03f0000000000001840000000000000000000000000000000000000000000001840');
INSERT INTO pg2dm VALUES(2,'beta',X'47500003e610000000000000000028400000000000002a400000000000000040000000000000084001d307000001000000040000000000000000002840000000000000004000000000000014400000000000002a4000000000000000400000000000001c400000000000002a4000000000000008400000000000002040000000000000284000000000000000400000000000001440');
INSERT INTO pg2dm VALUES(3,'gamma',X'47500003e610000000000000000024400000000000002e400000000000000000000000000000144001d307000002000000050000000000000000002440000000000000000000000000000000400000000000002e40000000000000000000000000000008400000000000002e4000000000000014400000000000001040000000000000244000000000000014400000000000002040000000000000244000000000000000000000000000000040040000000000000000002840000000000000004000000000000014400000000000002a40000000000000004000000000000018400000000000002a4000000000000008400000000000001c40000000000000284000000000000000400000000000001440');
INSERT INTO pg2dm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pg2dm_geom','rtree_pg2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_pg2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pg2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pg2dm_geom_node VALUES(1,X'000000030000000000000001000000003f800000000000003f800000000000000000000241400000415000004000000040400000000000000000000341200000417000000000000040a
CREATE TABLE IF NOT EXISTS "rtree_pg2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pg2dm_geom_rowid VALUES(1,1);
INSERT INTO rtree_pg2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_pg2dm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pg2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "pg3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pg3dz" PRIMARY KEY ("id"));
INSERT INTO pg3dz VALUES(1,'alpha',X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f01eb0300000100000005000000000000000000000000000000000000000000000000001440000000000000f03f00000000000000000000000000001840000000000000f03f000000000000f03f00000000000014400000000000000000000000000000f03f0000000000001840000000000000000000000000000000000000000000001840');
INSERT INTO pg3dz VALUES(2,'beta',X'47500003e610000000000000000028400000000000002a400000000000000040000000000000084001eb03000001000000040000000000000000002840000000000000004000000000000014400000000000002a4000000000000000400000000000001c400000000000002a4000000000000008400000000000002040000000000000284000000000000000400000000000001440');
INSERT INTO pg3dz VALUES(3,'gamma',X'47500003e610000000000000000024400000000000002e400000000000000000000000000000144001eb03000002000000050000000000000000002440000000000000000000000000000000400000000000002e40000000000000000000000000000008400000000000002e4000000000000014400000000000001040000000000000244000000000000014400000000000002040000000000000244000000000000000000000000000000040040000000000000000002840000000000000004000000000000014400000000000002a40000000000000004000000000000018400000000000002a4000000000000008400000000000001c40000000000000284000000000000000400000000000001440');
INSERT INTO pg3dz VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pg3dz_geom','rtree_pg3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_pg3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pg3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pg3dz_geom_node VALUES(1,X'000000030000000000000001000000003f800000000000003f800000000000000000000241400000415000004000000040400000000000000000000341200000417000000000000040a
CREATE TABLE IF NOT EXISTS "rtree_pg3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pg3dz_geom_rowid VALUES(1,1);
INSERT INTO rtree_pg3dz_geom_rowid VALUES(2,1);
INSERT INTO rtree_pg3dz_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pg3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "pg3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_pg3dzm" PRIMARY KEY ("id"));
INSERT INTO pg3dzm VALUES(1,'alpha',X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f01bb0b000001000000050000000000000000000000000000000000000000000000000014400000000000000840000000000000f03f000000000000000000000000000018400000000000001840000000000000f03f000000000000f03f00000000000014400000000000001c400000000000000000000000000000f03f000000000000184000000000000014400000000000000000000000000000000000000000000018400000000000000840');
INSERT INTO pg3dzm VALUES(2,'beta',X'47500003e610000000000000000028400000000000002a400000000000000040000000000000084001bb0b0000010000000400000000000000000028400000000000000040000000000000144000000000000010400000000000002a4000000000000000400000000000001c4000000000000014400000000000002a400000000000000840000000000000204000000000000000400000000000002840000000000000004000000000000014400000000000001040');
INSERT INTO pg3dzm VALUES(3,'gamma',X'47500003e610000000000000000024400000000000002e400000000000000000000000000000144001bb0b0000020000000500000000000000000024400000000000000000000000000000004000000000000018400000000000002e400000000000000000000000000000084000000000000010400000000000002e40000000000000144000000000000010400000000000001c40000000000000244000000000000014400000000000002040000000000000144000000000000024400000000000000000000000000000004000000000000018400400000000000000000028400000000000000040000000000000144000000000000000400000000000002a40000000000000004000000000000018400000000000001c400000000000002a4000000000000008400000000000001c400000000000001c400000000000002840000000000000004000000000000014400000000000000040');
INSERT INTO pg3dzm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_pg3dzm_geom','rtree_pg3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_pg3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_pg3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_pg3dzm_geom_node VALUES(1,X'000000030000000000000001000000003f800000000000003f800000000000000000000241400000415000004000000040400000000000000000000341200000417000000000000040a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
CREATE TABLE IF NOT EXISTS "rtree_pg3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_pg3dzm_geom_rowid VALUES(1,1);
INSERT INTO rtree_pg3dzm_geom_rowid VALUES(2,1);
INSERT INTO rtree_pg3dzm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_pg3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpg3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpg3dzm" PRIMARY KEY ("id"));
INSERT INTO mpg3dzm VALUES(1,'alpha',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f4001be0b00000200000001bb0b000001000000040000000000000000003440000000000000344000000000000008400000000000001c400000000000003540000000000000344000000000000018400000000000000840000000000000344000000000000035400000000000001c4000000000000010400000000000003440000000000000344000000000000008400000000000001c4001bb0b000001000000040000000000000000003e400000000000003e40000000000000104000000000000008400000000000003f400000000000003e400000000000001c4000000000000014400000000000003e400000000000003f4000000000000000400000000000001c400000000000003e400000000000003e4000000000000010400000000000000840');
INSERT INTO mpg3dzm VALUES(2,'beta',X'47500003e6100000000000000000354000000000000036400000000000003540000000000000364001be0b00000100000001bb0b000001000000040000000000000000003540000000000000354000000000000008400000000000001c400000000000003640000000000000354000000000000018400000000000000840000000000000354000000000000036400000000000001c4000000000000010400000000000003540000000000000354000000000000008400000000000001c40');
INSERT INTO mpg3dzm VALUES(3,'gamma',X'47500003e61000000000000000003f4000000000000040400000000000003f40000000000000404001be0b00000100000001bb0b000001000000040000000000000000003f400000000000003f400000000000001040000000000000084000000000000040400000000000003f400000000000001c4000000000000014400000000000003f40000000000000404000000000000000400000000000001c400000000000003f400000000000003f4000000000000010400000000000000840');
INSERT INTO mpg3dzm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpg3dzm_geom','rtree_mpg3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_mpg3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpg3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpg3dzm_geom_node VALUES(1,X'00000003000000000000000141a0000041f8000041a0000041f80000000000000000000241a8000041b0000041a8000041b00000000000000000000341f800004200000041f
CREATE TABLE IF NOT EXISTS "rtree_mpg3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpg3dzm_geom_rowid VALUES(1,1);
INSERT INTO rtree_mpg3dzm_geom_rowid VALUES(2,1);
INSERT INTO rtree_mpg3dzm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mpg3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpg3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpg3dz" PRIMARY KEY ("id"));
INSERT INTO mpg3dz VALUES(1,'alpha',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f4001ee0300000200000001eb0300000100000004000000000000000000344000000000000034400000000000001c40000000000000354000000000000034400000000000001840000000000000344000000000000035400000000000001040000000000000344000000000000034400000000000001c4001eb03000001000000040000000000000000003e400000000000003e4000000000000008400000000000003f400000000000003e400000000000001c400000000000003e400000000000003f4000000000000000400000000000003e400000000000003e400000000000000840');
INSERT INTO mpg3dz VALUES(2,'beta',X'47500003e6100000000000000000354000000000000036400000000000003540000000000000364001ee0300000100000001eb0300000100000004000000000000000000354000000000000035400000000000001c40000000000000364000000000000035400000000000000840000000000000354000000000000036400000000000001c40000000000000354000000000000035400000000000001c40');
INSERT INTO mpg3dz VALUES(3,'gamma',X'47500003e61000000000000000003f4000000000000040400000000000003f40000000000000404001ee0300000100000001eb03000001000000040000000000000000003f400000000000003f40000000000000084000000000000040400000000000003f400000000000001c400000000000003f40000000000000404000000000000000400000000000003f400000000000003f400000000000000840');
INSERT INTO mpg3dz VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpg3dz_geom','rtree_mpg3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_mpg3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpg3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpg3dz_geom_node VALUES(1,X'00000003000000000000000141a0000041f8000041a0000041f80000000000000000000241a8000041b0000041a8000041b00000000000000000000341f800004200000041f
CREATE TABLE IF NOT EXISTS "rtree_mpg3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpg3dz_geom_rowid VALUES(1,1);
INSERT INTO rtree_mpg3dz_geom_rowid VALUES(2,1);
INSERT INTO rtree_mpg3dz_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mpg3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpg2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpg2dm" PRIMARY KEY ("id"));
INSERT INTO mpg2dm VALUES(1,'alpha',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f4001d60700000200000001d30700000100000004000000000000000000344000000000000034400000000000001c40000000000000354000000000000034400000000000001840000000000000344000000000000035400000000000001040000000000000344000000000000034400000000000001c4001d307000001000000040000000000000000003e400000000000003e4000000000000008400000000000003f400000000000003e400000000000001c400000000000003e400000000000003f4000000000000000400000000000003e400000000000003e400000000000000840');
INSERT INTO mpg2dm VALUES(2,'beta',X'47500003e6100000000000000000354000000000000036400000000000003540000000000000364001d60700000100000001d30700000100000004000000000000000000354000000000000035400000000000001c40000000000000364000000000000035400000000000000840000000000000354000000000000036400000000000001c40000000000000354000000000000035400000000000001c40');
INSERT INTO mpg2dm VALUES(3,'gamma',X'47500003e61000000000000000003f4000000000000040400000000000003f40000000000000404001d60700000100000001d307000001000000040000000000000000003f400000000000003f40000000000000084000000000000040400000000000003f400000000000001c400000000000003f40000000000000404000000000000000400000000000003f400000000000003f400000000000000840');
INSERT INTO mpg2dm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpg2dm_geom','rtree_mpg2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_mpg2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpg2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpg2dm_geom_node VALUES(1,X'00000003000000000000000141a0000041f8000041a0000041f80000000000000000000241a8000041b0000041a8000041b00000000000000000000341f800004200000041f80000420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
CREATE TABLE IF NOT EXISTS "rtree_mpg2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpg2dm_geom_rowid VALUES(1,1);
INSERT INTO rtree_mpg2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_mpg2dm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mpg2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpg2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpg2d" PRIMARY KEY ("id"));
INSERT INTO mpg2d VALUES(0,'alpha',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f400106000000020000000103000000010000000400000000000000000034400000000000003440000000000000354000000000000034400000000000003440000000000000354000000000000034400000000000003440010300000001000000040000000000000000003e400000000000003e400000000000003f400000000000003e400000000000003e400000000000003f400000000000003e400000000000003e40');
INSERT INTO mpg2d VALUES(1,'delta',NULL);
INSERT INTO mpg2d VALUES(2,'beta',X'47500003e610000000000000000035400000000000003640000000000000354000000000000036400106000000010000000103000000010000000400000000000000000035400000000000003540000000000000364000000000000035400000000000003540000000000000364000000000000035400000000000003540');
INSERT INTO mpg2d VALUES(3,'gamma',X'47500003e61000000000000000003f4000000000000040400000000000003f400000000000004040010600000001000000010300000001000000040000000000000000003f400000000000003f4000000000000040400000000000003f400000000000003f4000000000000040400000000000003f400000000000003f40');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpg2d_geom','rtree_mpg2d_geom',0,'CREATE VIRTUAL TABLE "rtree_mpg2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpg2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpg2d_geom_node VALUES(1,X'00000003000000000000000041a0000041f8000041a0000041f80000000000000000000241a8000041b0000041a8000041b00000000000000000000341f800004200000041f
CREATE TABLE IF NOT EXISTS "rtree_mpg2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpg2d_geom_rowid VALUES(0,1);
INSERT INTO rtree_mpg2d_geom_rowid VALUES(2,1);
INSERT INTO rtree_mpg2d_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mpg2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mln2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mln2d" PRIMARY KEY ("id"));
INSERT INTO mln2d VALUES(1,'alpha',X'47500003e610000000000000000024400000000000003440000000000000244000000000000034400105000000010000000102000000020000000000000000003440000000000000244000000000000024400000000000003440');
INSERT INTO mln2d VALUES(2,'beta',X'47500003e6100000000000000000144000000000000035400000000000001440000000000000354001050000000200000001020000000200000000000000000035400000000000002640000000000000264000000000000035400102000000020000000000000000001440000000000000144000000000000024400000000000002440');
INSERT INTO mln2d VALUES(3,'gamma',X'47500003e6100000000000000000184000000000000036400000000000001840000000000000364001050000000200000001020000000200000000000000000036400000000000002840000000000000284000000000000036400102000000020000000000000000001840000000000000184000000000000026400000000000002640');
INSERT INTO mln2d VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mln2d_geom','rtree_mln2d_geom',0,'CREATE VIRTUAL TABLE "rtree_mln2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mln2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mln2d_geom_node VALUES(1,X'0000000300000000000000014120000041a000004120000041a00000000000000000000240a0000041a8000040a0000041a80000000000000000000340c0000041b0000040c0000041b
CREATE TABLE IF NOT EXISTS "rtree_mln2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mln2d_geom_rowid VALUES(1,1);
INSERT INTO rtree_mln2d_geom_rowid VALUES(2,1);
INSERT INTO rtree_mln2d_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mln2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mln2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mln2dm" PRIMARY KEY ("id"));
INSERT INTO mln2dm VALUES(0,'alpha',X'47500003e6100000000000000000244000000000000034400000000000002440000000000000344001d50700000100000001d207000002000000000000000000344000000000000024400000000000000840000000000000244000000000000034400000000000001c40');
INSERT INTO mln2dm VALUES(1,'delta',NULL);
INSERT INTO mln2dm VALUES(2,'beta',X'47500003e6100000000000000000144000000000000035400000000000001440000000000000354001d50700000200000001d207000002000000000000000000354000000000000026400000000000001840000000000000264000000000000035400000000000001c4001d207000002000000000000000000144000000000000014400000000000000840000000000000244000000000000024400000000000000040');
INSERT INTO mln2dm VALUES(3,'gamma',X'47500003e6100000000000000000184000000000000036400000000000001840000000000000364001d50700000200000001d207000002000000000000000000364000000000000028400000000000001040000000000000284000000000000036400000000000001c4001d207000002000000000000000000184000000000000018400000000000000040000000000000264000000000000026400000000000001440');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mln2dm_geom','rtree_mln2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_mln2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mln2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mln2dm_geom_node VALUES(1,X'0000000300000000000000004120000041a000004120000041a00000000000000000000240a0000041a8000040a0000041a80000000000000000000340c0000041b0000040c0000041b
CREATE TABLE IF NOT EXISTS "rtree_mln2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mln2dm_geom_rowid VALUES(0,1);
INSERT INTO rtree_mln2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_mln2dm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mln2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mln3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mln3dz" PRIMARY KEY ("id"));
INSERT INTO mln3dz VALUES(0,'alpha',X'47500003e6100000000000000000244000000000000034400000000000002440000000000000344001ed0300000100000001ea03000002000000000000000000344000000000000024400000000000000840000000000000244000000000000034400000000000001c40');
INSERT INTO mln3dz VALUES(1,'delta',NULL);
INSERT INTO mln3dz VALUES(2,'beta',X'47500003e6100000000000000000144000000000000035400000000000001440000000000000354001ed0300000200000001ea03000002000000000000000000354000000000000026400000000000001840000000000000264000000000000035400000000000001c4001ea03000002000000000000000000144000000000000014400000000000000840000000000000244000000000000024400000000000000040');
INSERT INTO mln3dz VALUES(3,'gamma',X'47500003e6100000000000000000184000000000000036400000000000001840000000000000364001ed0300000200000001ea03000002000000000000000000364000000000000028400000000000001040000000000000284000000000000036400000000000001c4001ea03000002000000000000000000184000000000000018400000000000000040000000000000264000000000000026400000000000001440');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mln3dz_geom','rtree_mln3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_mln3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mln3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mln3dz_geom_node VALUES(1,X'0000000300000000000000004120000041a000004120000041a00000000000000000000240a0000041a8000040a0000041a80000000000000000000340c0000041b0000040c0000041b
CREATE TABLE IF NOT EXISTS "rtree_mln3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mln3dz_geom_rowid VALUES(0,1);
INSERT INTO rtree_mln3dz_geom_rowid VALUES(2,1);
INSERT INTO rtree_mln3dz_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mln3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mln3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mln3dzm" PRIMARY KEY ("id"));
INSERT INTO mln3dzm VALUES(1,'alpha',X'47500003e6100000000000000000244000000000000034400000000000002440000000000000344001bd0b00000100000001ba0b0000020000000000000000003440000000000000244000000000000008400000000000001440000000000000244000000000000034400000000000001c400000000000000040');
INSERT INTO mln3dzm VALUES(2,'beta',X'47500003e6100000000000000000144000000000000035400000000000001440000000000000354001bd0b00000200000001ba0b0000020000000000000000003540000000000000264000000000000018400000000000000040000000000000264000000000000035400000000000001c40000000000000084001ba0b000002000000000000000000144000000000000014400000000000000840000000000000f03f0000000000002440000000000000244000000000000000400000000000001c40');
INSERT INTO mln3dzm VALUES(3,'gamma',X'47500003e6100000000000000000184000000000000036400000000000001840000000000000364001bd0b00000200000001ba0b0000020000000000000000003640000000000000284000000000000010400000000000001840000000000000284000000000000036400000000000001c40000000000000184001ba0b00000200000000000000000018400000000000001840000000000000004000000000000010400000000000002640000000000000264000000000000014400000000000002240');
INSERT INTO mln3dzm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mln3dzm_geom','rtree_mln3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_mln3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mln3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mln3dzm_geom_node VALUES(1,X'0000000300000000000000014120000041a000004120000041a00000000000000000000240a0000041a8000040a0000041a80000000000000000000340c0000041b0000040c0000041b
CREATE TABLE IF NOT EXISTS "rtree_mln3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mln3dzm_geom_rowid VALUES(1,1);
INSERT INTO rtree_mln3dzm_geom_rowid VALUES(2,1);
INSERT INTO rtree_mln3dzm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mln3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpt3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpt3dzm" PRIMARY KEY ("id"));
INSERT INTO mpt3dzm VALUES(0,'alpha',X'47500003e6100000000000000000144000000000000014400000000000001440000000000000144001bc0b00000100000001b90b0000000000000000144000000000000014400000000000001c400000000000000040');
INSERT INTO mpt3dzm VALUES(1,'beta',X'47500003e6100000000000000000244000000000000034400000000000002440000000000000344001bc0b00000200000001b90b0000000000000000244000000000000034400000000000000840000000000000184001b90b00000000000000003440000000000000244000000000000014400000000000001c40');
INSERT INTO mpt3dzm VALUES(2,'delta',NULL);
INSERT INTO mpt3dzm VALUES(3,'gamma',X'47500003e6100000000000000000244000000000000024400000000000001840000000000000184001bc0b00000100000001b90b000000000000000024400000000000001840000000000000f03f0000000000001040');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpt3dzm_geom','rtree_mpt3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_mpt3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpt3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpt3dzm_geom_node VALUES(1,X'00000003000000000000000040a0000040a0000040a0000040a0000000000000000000014120000041a000004120000041a000000000000000000003412000004120000040c0000040c
CREATE TABLE IF NOT EXISTS "rtree_mpt3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpt3dzm_geom_rowid VALUES(0,1);
INSERT INTO rtree_mpt3dzm_geom_rowid VALUES(1,1);
INSERT INTO rtree_mpt3dzm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mpt3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpt3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpt3dz" PRIMARY KEY ("id"));
INSERT INTO mpt3dz VALUES(1,'alpha',X'47500003e6100000000000000000144000000000000014400000000000001440000000000000144001ec0300000100000001e9030000000000000000144000000000000014400000000000001c40');
INSERT INTO mpt3dz VALUES(2,'beta',X'47500003e6100000000000000000244000000000000034400000000000002440000000000000344001ec0300000200000001e903000000000000000024400000000000003440000000000000084001e9030000000000000000344000000000000024400000000000001440');
INSERT INTO mpt3dz VALUES(3,'gamma',X'47500003e6100000000000000000244000000000000024400000000000001840000000000000184001ec0300000100000001e903000000000000000024400000000000001840000000000000f03f');
INSERT INTO mpt3dz VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpt3dz_geom','rtree_mpt3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_mpt3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpt3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpt3dz_geom_node VALUES(1,X'00000003000000000000000140a0000040a0000040a0000040a0000000000000000000024120000041a000004120000041a000000000000000000003412000004120000040c0000040c
CREATE TABLE IF NOT EXISTS "rtree_mpt3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpt3dz_geom_rowid VALUES(1,1);
INSERT INTO rtree_mpt3dz_geom_rowid VALUES(2,1);
INSERT INTO rtree_mpt3dz_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mpt3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpt2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpt2dm" PRIMARY KEY ("id"));
INSERT INTO mpt2dm VALUES(1,'alpha',X'47500003e6100000000000000000144000000000000014400000000000001440000000000000144001d40700000100000001d1070000000000000000144000000000000014400000000000001c40');
INSERT INTO mpt2dm VALUES(2,'beta',X'47500003e6100000000000000000244000000000000034400000000000002440000000000000344001d40700000200000001d107000000000000000024400000000000003440000000000000084001d1070000000000000000344000000000000024400000000000001440');
INSERT INTO mpt2dm VALUES(3,'gamma',X'47500003e6100000000000000000244000000000000024400000000000001840000000000000184001d40700000100000001d107000000000000000024400000000000001840000000000000f03f');
INSERT INTO mpt2dm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpt2dm_geom','rtree_mpt2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_mpt2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpt2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpt2dm_geom_node VALUES(1,X'00000003000000000000000140a0000040a0000040a0000040a0000000000000000000024120000041a000004120000041a000000000000000000003412000004120000040c0000040c
CREATE TABLE IF NOT EXISTS "rtree_mpt2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpt2dm_geom_rowid VALUES(1,1);
INSERT INTO rtree_mpt2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_mpt2dm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_mpt2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "mpt2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_mpt2d" PRIMARY KEY ("id"));
INSERT INTO mpt2d VALUES(0,'alpha',X'47500003e61000000000000000001440000000000000144000000000000014400000000000001440010400000001000000010100000000000000000014400000000000001440');
INSERT INTO mpt2d VALUES(1,'beta',X'47500003e61000000000000000002440000000000000344000000000000024400000000000003440010400000002000000010100000000000000000024400000000000003440010100000000000000000034400000000000002440');
INSERT INTO mpt2d VALUES(2,'gamma',X'47500003e61000000000000000001840000000000000184000000000000022400000000000002240010400000001000000010100000000000000000018400000000000002240');
INSERT INTO mpt2d VALUES(3,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_mpt2d_geom','rtree_mpt2d_geom',0,'CREATE VIRTUAL TABLE "rtree_mpt2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_mpt2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_mpt2d_geom_node VALUES(1,X'00000003000000000000000040a0000040a0000040a0000040a0000000000000000000014120000041a000004120000041a00000000000000000000240c0000040c0000041100000411000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
CREATE TABLE IF NOT EXISTS "rtree_mpt2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_mpt2d_geom_rowid VALUES(0,1);
INSERT INTO rtree_mpt2d_geom_rowid VALUES(1,1);
INSERT INTO rtree_mpt2d_geom_rowid VALUES(2,1);
CREATE TABLE IF NOT EXISTS "rtree_mpt2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "gc2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_gc2d" PRIMARY KEY ("id"));
INSERT INTO gc2d VALUES(0,'alpha',X'47500003e6100000000000000000f03f0000000000003640000000000000084000000000000036400107000000020000000101000000000000000000f03f00000000000008400103000000010000000400000000000000000035400000000000003540000000000000364000000000000035400000000000003540000000000000364000000000000035400000000000003540');
INSERT INTO gc2d VALUES(1,'delta',NULL);
INSERT INTO gc2d VALUES(2,'beta',X'47500003e610000000000000000014400000000000003440000000000000084000000000000034400107000000020000000101000000000000000000144000000000000008400102000000020000000000000000002440000000000000244000000000000034400000000000003440');
INSERT INTO gc2d VALUES(3,'gamma',X'47500003e61000000000000000002240000000000000224000000000000000400000000000000040010700000001000000010100000000000000000022400000000000000040');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_gc2d_geom','rtree_gc2d_geom',0,'CREATE VIRTUAL TABLE "rtree_gc2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_gc2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_gc2d_geom_node VALUES(1,X'0000000300000000000000003f80000041b000004040000041b00000000000000000000240a0000041a000004040000041a
CREATE TABLE IF NOT EXISTS "rtree_gc2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_gc2d_geom_rowid VALUES(0,1);
INSERT INTO rtree_gc2d_geom_rowid VALUES(2,1);
INSERT INTO rtree_gc2d_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_gc2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "gc2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_gc2dm" PRIMARY KEY ("id"));
INSERT INTO gc2dm VALUES(0,'alpha',X'47500003e6100000000000000000f03f00000000000036400000000000000840000000000000364001d70700000200000001d1070000000000000000f03f00000000000008400000000000001c4001d30700000100000004000000000000000000354000000000000035400000000000000840000000000000364000000000000035400000000000001440000000000000354000000000000036400000000000002040000000000000354000000000000035400000000000000840');
INSERT INTO gc2dm VALUES(1,'delta',NULL);
INSERT INTO gc2dm VALUES(2,'beta',X'47500003e6100000000000000000144000000000000034400000000000000840000000000000344001d70700000200000001d107000000000000000014400000000000000840000000000000144001d207000002000000000000000000244000000000000024400000000000001840000000000000344000000000000034400000000000002040');
INSERT INTO gc2dm VALUES(3,'gamma',X'47500003e6100000000000000000224000000000000022400000000000000040000000000000004001d70700000100000001d1070000000000000000224000000000000000400000000000001c40');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_gc2dm_geom','rtree_gc2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_gc2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_gc2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_gc2dm_geom_node VALUES(1,X'0000000300000000000000003f80000041b000004040000041b00000000000000000000240a0000041a000004040000041a
CREATE TABLE IF NOT EXISTS "rtree_gc2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_gc2dm_geom_rowid VALUES(0,1);
INSERT INTO rtree_gc2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_gc2dm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_gc2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "gc3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_gc3dz" PRIMARY KEY ("id"));
INSERT INTO gc3dz VALUES(0,'alpha',X'47500003e6100000000000000000f03f00000000000036400000000000000840000000000000364001ef0300000200000001e9030000000000000000f03f00000000000008400000000000001c4001eb0300000100000004000000000000000000354000000000000035400000000000000840000000000000364000000000000035400000000000001440000000000000354000000000000036400000000000002040000000000000354000000000000035400000000000000840');
INSERT INTO gc3dz VALUES(1,'delta',NULL);
INSERT INTO gc3dz VALUES(2,'beta',X'47500003e6100000000000000000144000000000000034400000000000000840000000000000344001ef0300000200000001e903000000000000000014400000000000000840000000000000144001ea03000002000000000000000000244000000000000024400000000000001840000000000000344000000000000034400000000000002040');
INSERT INTO gc3dz VALUES(3,'gamma',X'47500003e6100000000000000000224000000000000022400000000000000040000000000000004001ef0300000100000001e9030000000000000000224000000000000000400000000000001c40');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_gc3dz_geom','rtree_gc3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_gc3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_gc3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_gc3dz_geom_node VALUES(1,X'0000000300000000000000003f80000041b000004040000041b00000000000000000000240a0000041a000004040000041a
CREATE TABLE IF NOT EXISTS "rtree_gc3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_gc3dz_geom_rowid VALUES(0,1);
INSERT INTO rtree_gc3dz_geom_rowid VALUES(2,1);
INSERT INTO rtree_gc3dz_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_gc3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "gc3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_gc3dzm" PRIMARY KEY ("id"));
INSERT INTO gc3dzm VALUES(1,'alpha',X'47500003e6100000000000000000f03f00000000000036400000000000000840000000000000364001bf0b00000200000001b90b0000000000000000f03f00000000000008400000000000001c40000000000000004001bb0b000001000000040000000000000000003540000000000000354000000000000008400000000000001440000000000000364000000000000035400000000000001440000000000000104000000000000035400000000000003640000000000000204000000000000020400000000000003540000000000000354000000000000008400000000000001440');
INSERT INTO gc3dzm VALUES(2,'beta',X'47500003e6100000000000000000144000000000000034400000000000000840000000000000344001bf0b00000200000001b90b0000000000000000144000000000000008400000000000001440000000000000204001ba0b000002000000000000000000244000000000000024400000000000001840000000000000f03f0000000000003440000000000000344000000000000020400000000000000840');
INSERT INTO gc3dzm VALUES(3,'gamma',X'47500003e6100000000000000000224000000000000022400000000000000040000000000000004001bf0b00000100000001b90b0000000000000000224000000000000000400000000000001c400000000000000040');
INSERT INTO gc3dzm VALUES(4,'delta',NULL);
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_gc3dzm_geom','rtree_gc3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_gc3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_gc3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_gc3dzm_geom_node VALUES(1,X'0000000300000000000000013f80000041b000004040000041b00000000000000000000240a0000041a000004040000041a
CREATE TABLE IF NOT EXISTS "rtree_gc3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_gc3dzm_geom_rowid VALUES(1,1);
INSERT INTO rtree_gc3dzm_geom_rowid VALUES(2,1);
INSERT INTO rtree_gc3dzm_geom_rowid VALUES(3,1);
CREATE TABLE IF NOT EXISTS "rtree_gc3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "geo3dzm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_geo3dzm" PRIMARY KEY ("id"));
INSERT INTO geo3dzm VALUES(0,'alpha',X'47500003e6100000000000000000244000000000000024400000000000001040000000000000104001b90b00000000000000002440000000000000104000000000000014400000000000001c40');
INSERT INTO geo3dzm VALUES(2,'beta',X'47500003e6100000000000000000264000000000000028400000000000001440000000000000204001ba0b00000200000000000000000026400000000000001440000000000000084000000000000018400000000000002840000000000000204000000000000018400000000000001c40');
INSERT INTO geo3dzm VALUES(3,'gamma',X'47500003e6100000000000000000344000000000000035400000000000003440000000000000354001bb0b00000100000004000000000000000000344000000000000034400000000000000040000000000000144000000000000035400000000000003440000000000000084000000000000008400000000000003440000000000000354000000000000010400000000000001c400000000000003440000000000000344000000000000000400000000000001440');
INSERT INTO geo3dzm VALUES(4,'delta',NULL);
INSERT INTO geo3dzm VALUES(5,'epsilon',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f4001be0b00000200000001bb0b000001000000040000000000000000003440000000000000344000000000000008400000000000001c400000000000003540000000000000344000000000000018400000000000000840000000000000344000000000000035400000000000001c4000000000000010400000000000003440000000000000344000000000000008400000000000001c4001bb0b000001000000040000000000000000003e400000000000003e40000000000000104000000000000008400000000000003f400000000000003e400000000000001c4000000000000014400000000000003e400000000000003f4000000000000000400000000000001c400000000000003e400000000000003e4000000000000010400000000000000840');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_geo3dzm_geom','rtree_geo3dzm_geom',0,'CREATE VIRTUAL TABLE "rtree_geo3dzm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_geo3dzm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_geo3dzm_geom_node VALUES(1,X'000000040000000000000000412000004120000040800000408000000000000000000002413000004140000040a0000041000000000000000000000341a0000041a8000041a0000041a80000000000000000000541a0000041f8000041a0000041f
CREATE TABLE IF NOT EXISTS "rtree_geo3dzm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_geo3dzm_geom_rowid VALUES(0,1);
INSERT INTO rtree_geo3dzm_geom_rowid VALUES(2,1);
INSERT INTO rtree_geo3dzm_geom_rowid VALUES(3,1);
INSERT INTO rtree_geo3dzm_geom_rowid VALUES(5,1);
CREATE TABLE IF NOT EXISTS "rtree_geo3dzm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "geo3dz" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_geo3dz" PRIMARY KEY ("id"));
INSERT INTO geo3dz VALUES(0,'alpha',X'47500003e6100000000000000000244000000000000024400000000000001040000000000000104001e9030000000000000000244000000000000010400000000000001440');
INSERT INTO geo3dz VALUES(2,'beta',X'47500003e6100000000000000000264000000000000028400000000000001440000000000000204001ea03000002000000000000000000264000000000000014400000000000000840000000000000284000000000000020400000000000001840');
INSERT INTO geo3dz VALUES(3,'gamma',X'47500003e6100000000000000000344000000000000035400000000000003440000000000000354001eb0300000100000004000000000000000000344000000000000034400000000000000040000000000000354000000000000034400000000000000840000000000000344000000000000035400000000000001040000000000000344000000000000034400000000000000040');
INSERT INTO geo3dz VALUES(4,'delta',NULL);
INSERT INTO geo3dz VALUES(5,'epsilon',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f4001ee0300000200000001eb0300000100000004000000000000000000344000000000000034400000000000000840000000000000354000000000000034400000000000001840000000000000344000000000000035400000000000001c4000000000000034400000000000003440000000000000084001eb03000001000000040000000000000000003e400000000000003e4000000000000010400000000000003f400000000000003e400000000000001c400000000000003e400000000000003f4000000000000000400000000000003e400000000000003e400000000000001040');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_geo3dz_geom','rtree_geo3dz_geom',0,'CREATE VIRTUAL TABLE "rtree_geo3dz_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_geo3dz_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_geo3dz_geom_node VALUES(1,X'000000040000000000000000412000004120000040800000408000000000000000000002413000004140000040a0000041000000000000000000000341a0000041a8000041a0000041a80000000000000000000541a0000041f8000041a0000041f
CREATE TABLE IF NOT EXISTS "rtree_geo3dz_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_geo3dz_geom_rowid VALUES(0,1);
INSERT INTO rtree_geo3dz_geom_rowid VALUES(2,1);
INSERT INTO rtree_geo3dz_geom_rowid VALUES(3,1);
INSERT INTO rtree_geo3dz_geom_rowid VALUES(5,1);
CREATE TABLE IF NOT EXISTS "rtree_geo3dz_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "geo2dm" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_geo2dm" PRIMARY KEY ("id"));
INSERT INTO geo2dm VALUES(0,'alpha',X'47500003e6100000000000000000244000000000000024400000000000001040000000000000104001d1070000000000000000244000000000000010400000000000001440');
INSERT INTO geo2dm VALUES(2,'beta',X'47500003e6100000000000000000264000000000000028400000000000001440000000000000204001d207000002000000000000000000264000000000000014400000000000000840000000000000284000000000000020400000000000001840');
INSERT INTO geo2dm VALUES(3,'gamma',X'47500003e6100000000000000000344000000000000035400000000000003440000000000000354001d30700000100000004000000000000000000344000000000000034400000000000000040000000000000354000000000000034400000000000000840000000000000344000000000000035400000000000001040000000000000344000000000000034400000000000000040');
INSERT INTO geo2dm VALUES(4,'delta',NULL);
INSERT INTO geo2dm VALUES(5,'epsilon',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f4001d60700000200000001d30700000100000004000000000000000000344000000000000034400000000000000840000000000000354000000000000034400000000000001840000000000000344000000000000035400000000000001c4000000000000034400000000000003440000000000000084001d307000001000000040000000000000000003e400000000000003e4000000000000010400000000000003f400000000000003e400000000000001c400000000000003e400000000000003f4000000000000000400000000000003e400000000000003e400000000000001040');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_geo2dm_geom','rtree_geo2dm_geom',0,'CREATE VIRTUAL TABLE "rtree_geo2dm_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_geo2dm_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_geo2dm_geom_node VALUES(1,X'000000040000000000000000412000004120000040800000408000000000000000000002413000004140000040a0000041000000000000000000000341a0000041a8000041a0000041a80000000000000000000541a0000041f8000041a0000041f
CREATE TABLE IF NOT EXISTS "rtree_geo2dm_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_geo2dm_geom_rowid VALUES(0,1);
INSERT INTO rtree_geo2dm_geom_rowid VALUES(2,1);
INSERT INTO rtree_geo2dm_geom_rowid VALUES(3,1);
INSERT INTO rtree_geo2dm_geom_rowid VALUES(5,1);
CREATE TABLE IF NOT EXISTS "rtree_geo2dm_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "geo2d" (
	"id" "INTEGER" NOT NULL,
	"name" "TEXT" NOT NULL, geom BLOB,
	CONSTRAINT "pk_geo2d" PRIMARY KEY ("id"));
INSERT INTO geo2d VALUES(1,'alpha',X'47500003e61000000000000000002440000000000000244000000000000010400000000000001040010100000000000000000024400000000000001040');
INSERT INTO geo2d VALUES(2,'beta',X'47500003e610000000000000000026400000000000002840000000000000144000000000000020400102000000020000000000000000002640000000000000144000000000000028400000000000002040');
INSERT INTO geo2d VALUES(3,'gamma',X'47500003e610000000000000000034400000000000003540000000000000344000000000000035400103000000010000000400000000000000000034400000000000003440000000000000354000000000000034400000000000003440000000000000354000000000000034400000000000003440');
INSERT INTO geo2d VALUES(4,'delta',NULL);
INSERT INTO geo2d VALUES(5,'epsilon',X'47500003e610000000000000000034400000000000003f4000000000000034400000000000003f400106000000020000000103000000010000000400000000000000000034400000000000003440000000000000354000000000000034400000000000003440000000000000354000000000000034400000000000003440010300000001000000040000000000000000003e400000000000003e400000000000003f400000000000003e400000000000003e400000000000003f400000000000003e400000000000003e40');
INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)VALUES('table','rtree_geo2d_geom','rtree_geo2d_geom',0,'CREATE VIRTUAL TABLE "rtree_geo2d_geom" USING rtree(id, minx, maxx, miny, maxy)');
CREATE TABLE IF NOT EXISTS "rtree_geo2d_geom_node"(nodeno INTEGER PRIMARY KEY, data BLOB);
INSERT INTO rtree_geo2d_geom_node VALUES(1,X'000000040000000000000001412000004120000040800000408000000000000000000002413000004140000040a0000041000000000000000000000341a0000041a8000041a0000041a80000000000000000000541a0000041f8000041a0000041f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
CREATE TABLE IF NOT EXISTS "rtree_geo2d_geom_rowid"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);
INSERT INTO rtree_geo2d_geom_rowid VALUES(1,1);
INSERT INTO rtree_geo2d_geom_rowid VALUES(2,1);
INSERT INTO rtree_geo2d_geom_rowid VALUES(3,1);
INSERT INTO rtree_geo2d_geom_rowid VALUES(5,1);
CREATE TABLE IF NOT EXISTS "rtree_geo2d_geom_parent"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);
CREATE TABLE IF NOT EXISTS "test_pk" (
	"first_name" "TEXT" NOT NULL,
	"last_name" "TEXT" NOT NULL,
	"value1" "DOUBLE" NOT NULL,
	"value2" "DOUBLE" NOT NULL, geom BLOB,
	CONSTRAINT "pk_test_pk" PRIMARY KEY ("last_name", "first_name"));
INSERT INTO test_pk VALUES('alpha','one',1.1000000000000000888,10.099999999999999644,X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f0103000000010000000500000000000000000000000000000000000000000000000000f03f0000000000000000000000000000f03f000000000000f03f0000000000000000000000000000f03f00000000000000000000000000000000');
INSERT INTO test_pk VALUES('beta','two',2.2000000000000001776,20.199999999999999288,X'47500003e610000000000000000028400000000000002a400000000000000040000000000000084001030000000100000004000000000000000000284000000000000000400000000000002a4000000000000000400000000000002a40000000000000084000000000000028400000000000000040');
INSERT INTO test_pk VALUES('gamma','three',3.2999999999999998223,30.30000000000000071,X'47500003e61000000000000000000000000000000000f03f0000000000000000000000000000f03f01020000000200000000000000000000000000000000000000000000000000f03f000000000000f03f');
INSERT INTO test_pk VALUES('delta','four',4.4000000000000003552,40.399999999999998577,NULL);
INSERT INTO test_pk VALUES('epsilon','five',5.5,50.500000000000000001,X'47500003e61000000000000000001840000000000000184000000000000022400000000000002240010400000001000000010100000000000000000018400000000000002240');
CREATE TRIGGER 'gpkg_tile_matrix_zoom_level_insert'
BEFORE INSERT ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: zoom_level cannot be less than 0')
WHERE (NEW.zoom_level < 0);
END;
CREATE TRIGGER 'gpkg_tile_matrix_zoom_level_update'
BEFORE UPDATE of zoom_level ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: zoom_level cannot be less than 0')
WHERE (NEW.zoom_level < 0);
END;
CREATE TRIGGER 'gpkg_tile_matrix_matrix_width_insert'
BEFORE INSERT ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: matrix_width cannot be less than 1')
WHERE (NEW.matrix_width < 1);
END;
CREATE TRIGGER 'gpkg_tile_matrix_matrix_width_update'
BEFORE UPDATE OF matrix_width ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: matrix_width cannot be less than 1')
WHERE (NEW.matrix_width < 1);
END;
CREATE TRIGGER 'gpkg_tile_matrix_matrix_height_insert'
BEFORE INSERT ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: matrix_height cannot be less than 1')
WHERE (NEW.matrix_height < 1);
END;
CREATE TRIGGER 'gpkg_tile_matrix_matrix_height_update'
BEFORE UPDATE OF matrix_height ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: matrix_height cannot be less than 1')
WHERE (NEW.matrix_height < 1);
END;
CREATE TRIGGER 'gpkg_tile_matrix_pixel_x_size_insert'
BEFORE INSERT ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: pixel_x_size must be greater than 0')
WHERE NOT (NEW.pixel_x_size > 0);
END;
CREATE TRIGGER 'gpkg_tile_matrix_pixel_x_size_update'
BEFORE UPDATE OF pixel_x_size ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: pixel_x_size must be greater than 0')
WHERE NOT (NEW.pixel_x_size > 0);
END;
CREATE TRIGGER 'gpkg_tile_matrix_pixel_y_size_insert'
BEFORE INSERT ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: pixel_y_size must be greater than 0')
WHERE NOT (NEW.pixel_y_size > 0);
END;
CREATE TRIGGER 'gpkg_tile_matrix_pixel_y_size_update'
BEFORE UPDATE OF pixel_y_size ON 'gpkg_tile_matrix'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: pixel_y_size must be greater than 0')
WHERE NOT (NEW.pixel_y_size > 0);
END;
CREATE TRIGGER 'gpkg_metadata_md_scope_insert'
BEFORE INSERT ON 'gpkg_metadata'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table gpkg_metadata violates constraint: md_scope must be one of undefined | fieldSession | collectionSession | series | dataset | featureType | feature | attributeType | attribute | tile | model | catalog | schema | taxonomy | software | service | collectionHardware | nonGeographicDataset | dimensionGroup')
WHERE NOT(NEW.md_scope IN ('undefined','fieldSession','collectionSession','series','dataset', 'featureType','feature','attributeType','attribute','tile','model', 'catalog','schema','taxonomy','software','service', 'collectionHardware','nonGeographicDataset','dimensionGroup'));
END;
CREATE TRIGGER 'gpkg_metadata_md_scope_update'
BEFORE UPDATE OF 'md_scope' ON 'gpkg_metadata'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table gpkg_metadata violates constraint: md_scope must be one of undefined | fieldSession | collectionSession | series | dataset | featureType | feature | attributeType | attribute | tile | model | catalog | schema | taxonomy | software | service | collectionHardware | nonGeographicDataset | dimensionGroup')
WHERE NOT(NEW.md_scope IN ('undefined','fieldSession','collectionSession','series','dataset', 'featureType','feature','attributeType','attribute','tile','model', 'catalog','schema','taxonomy','software','service', 'collectionHardware','nonGeographicDataset','dimensionGroup'));
END;
CREATE TRIGGER 'gpkg_metadata_reference_reference_scope_insert'
BEFORE INSERT ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference violates constraint: reference_scope must be one of "geopackage", "table", "column", "row", "row/col"')
WHERE NOT NEW.reference_scope IN ('geopackage','table','column','row','row/col');
END;
CREATE TRIGGER 'gpkg_metadata_reference_reference_scope_update'
BEFORE UPDATE OF 'reference_scope' ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference violates constraint: reference_scope must be one of "geopackage", "table", "column", "row", "row/col"')
WHERE NOT NEW.reference_scope IN ('geopackage','table','column','row','row/col');
END;
CREATE TRIGGER 'gpkg_metadata_reference_column_name_insert'
BEFORE INSERT ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference violates constraint: column name must be NULL when reference_scope is "geopackage", "table" or "row"')
WHERE (NEW.reference_scope IN ('geopackage','table','row') AND NEW.column_name IS NOT NULL);
SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference violates constraint: column name must be defined for the specified table when reference_scope is "column" or "row/col"')
WHERE (NEW.reference_scope IN ('column','row/col') AND NOT NEW.table_name IN (SELECT name FROM SQLITE_MASTER WHERE type = 'table' AND name = NEW.table_name AND sql LIKE ('%' || NEW.column_name || '%')));
END;
CREATE TRIGGER 'gpkg_metadata_reference_column_name_update'
BEFORE UPDATE OF column_name ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference violates constraint: column name must be NULL when reference_scope is "geopackage", "table" or "row"')
WHERE (NEW.reference_scope IN ('geopackage','table','row') AND NEW.column_nameIS NOT NULL);
SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference violates constraint: column name must be defined for the specified table when reference_scope is "column" or "row/col"')
WHERE (NEW.reference_scope IN ('column','row/col') AND NOT NEW.table_name IN (SELECT name FROM SQLITE_MASTER WHERE type = 'table' AND name = NEW.table_name AND sql LIKE ('%' || NEW.column_name || '%')));
END;
CREATE TRIGGER 'gpkg_metadata_reference_row_id_value_insert'
BEFORE INSERT ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference violates constraint: row_id_value must be NULL when reference_scope is "geopackage", "table" or "column"')
WHERE NEW.reference_scope IN ('geopackage','table','column') AND NEW.row_id_value IS NOT NULL;
SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference violates constraint: row_id_value must exist in specified table when reference_scope is "row" or "row/col"')
WHERE NEW.reference_scope IN ('row','row/col') AND NOT EXISTS (SELECT rowid FROM (SELECT NEW.table_name AS table_name) WHERE rowid = NEW.row_id_value);
END;
CREATE TRIGGER 'gpkg_metadata_reference_row_id_value_update'
BEFORE UPDATE OF 'row_id_value' ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference violates constraint: row_id_value must be NULL when reference_scope is "geopackage", "table" or "column"')
WHERE NEW.reference_scope IN ('geopackage','table','column') AND NEW.row_id_value IS NOT NULL;
SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference violates constraint: row_id_value must exist in specified table when reference_scope is "row" or "row/col"')
WHERE NEW.reference_scope IN ('row','row/col') AND NOT EXISTS (SELECT rowid FROM (SELECT NEW.table_name AS table_name) WHERE rowid = NEW.row_id_value);
END;
CREATE TRIGGER 'gpkg_metadata_reference_timestamp_insert'
BEFORE INSERT ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference violates constraint: timestamp must be a valid time in ISO 8601 "yyyy-mm-ddThh-mm-ss.cccZ" form')
WHERE NOT (NEW.timestamp GLOB '[1-2][0-9][0-9][0-9]-[0-1][0-9]-[1-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9][0-9][0-9]Z' AND strftime('%s',NEW.timestamp) NOT NULL);
END;
CREATE TRIGGER 'gpkg_metadata_reference_timestamp_update'
BEFORE UPDATE OF 'timestamp' ON 'gpkg_metadata_reference'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference violates constraint: timestamp must be a valid time in ISO 8601 "yyyy-mm-ddThh-mm-ss.cccZ" form')
WHERE NOT (NEW.timestamp GLOB '[1-2][0-9][0-9][0-9]-[0-1][0-9]-[1-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9][0-9][0-9]Z' AND strftime('%s',NEW.timestamp) NOT NULL);
END;
CREATE TRIGGER 'gpkg_geometry_columns_z_insert'
BEFORE INSERT ON 'gpkg_geometry_columns'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table gpkg_geometry_columns violates constraint: z must be one of 0, 1 or 2')
WHERE NOT(NEW.z IN (0, 1, 2));
END;
CREATE TRIGGER 'gpkg_geometry_columns_z_update'
BEFORE UPDATE OF 'z' ON 'gpkg_geometry_columns'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table gpkg_geometry_columns violates constraint: z must be one of 0, 1 or 2')
WHERE NOT NEW.z IN (0, 1, 2);
END;
CREATE TRIGGER 'gpkg_geometry_columns_m_insert'
BEFORE INSERT ON 'gpkg_geometry_columns'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'insert on table gpkg_geometry_columns violates constraint: m must be one of 0, 1 or 2')
WHERE NOT(NEW.m IN (0, 1, 2));
END;
CREATE TRIGGER 'gpkg_geometry_columns_m_update'
BEFORE UPDATE OF 'm' ON 'gpkg_geometry_columns'
FOR EACH ROW BEGIN
SELECT RAISE(ABORT, 'update on table gpkg_geometry_columns violates constraint: m must be one of 0, 1 or 2')
WHERE NOT NEW.m IN (0, 1, 2);
END;
CREATE TRIGGER "fgti_pt2d_geom"
BEFORE INSERT ON "pt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pt2d_geom"
BEFORE UPDATE OF "geom" ON "pt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pt2d_geom"
BEFORE INSERT ON "pt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pt2d_geom"
BEFORE UPDATE OF "geom" ON "pt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pt2d_geom_insert"
AFTER INSERT ON "pt2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt2d_geom_update1"
AFTER UPDATE OF "geom" ON "pt2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt2d_geom_update2"
AFTER UPDATE OF "geom" ON "pt2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pt2d_geom_update3"
AFTER UPDATE OF "geom" ON "pt2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pt2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt2d_geom_update4"
AFTER UPDATE ON "pt2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pt2d_geom_delete"
AFTER DELETE ON "pt2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pt2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_pt2dm_geom"
BEFORE INSERT ON "pt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pt2dm_geom"
BEFORE UPDATE OF "geom" ON "pt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pt2dm_geom"
BEFORE INSERT ON "pt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pt2dm_geom"
BEFORE UPDATE OF "geom" ON "pt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pt2dm_geom_insert"
AFTER INSERT ON "pt2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt2dm_geom_update1"
AFTER UPDATE OF "geom" ON "pt2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt2dm_geom_update2"
AFTER UPDATE OF "geom" ON "pt2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pt2dm_geom_update3"
AFTER UPDATE OF "geom" ON "pt2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pt2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt2dm_geom_update4"
AFTER UPDATE ON "pt2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pt2dm_geom_delete"
AFTER DELETE ON "pt2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pt2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_pt3dz_geom"
BEFORE INSERT ON "pt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pt3dz_geom"
BEFORE UPDATE OF "geom" ON "pt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pt3dz_geom"
BEFORE INSERT ON "pt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pt3dz_geom"
BEFORE UPDATE OF "geom" ON "pt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pt3dz_geom_insert"
AFTER INSERT ON "pt3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt3dz_geom_update1"
AFTER UPDATE OF "geom" ON "pt3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt3dz_geom_update2"
AFTER UPDATE OF "geom" ON "pt3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pt3dz_geom_update3"
AFTER UPDATE OF "geom" ON "pt3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pt3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt3dz_geom_update4"
AFTER UPDATE ON "pt3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pt3dz_geom_delete"
AFTER DELETE ON "pt3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pt3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_pt3dzm_geom"
BEFORE INSERT ON "pt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pt3dzm_geom"
BEFORE UPDATE OF "geom" ON "pt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pt3dzm_geom"
BEFORE INSERT ON "pt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pt3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pt3dzm_geom"
BEFORE UPDATE OF "geom" ON "pt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pt3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pt3dzm_geom_insert"
AFTER INSERT ON "pt3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "pt3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pt3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "pt3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pt3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "pt3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pt3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pt3dzm_geom_update4"
AFTER UPDATE ON "pt3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pt3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pt3dzm_geom_delete"
AFTER DELETE ON "pt3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pt3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_ln2d_geom"
BEFORE INSERT ON "ln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_ln2d_geom"
BEFORE UPDATE OF "geom" ON "ln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_ln2d_geom"
BEFORE INSERT ON "ln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_ln2d_geom"
BEFORE UPDATE OF "geom" ON "ln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_ln2d_geom_insert"
AFTER INSERT ON "ln2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln2d_geom_update1"
AFTER UPDATE OF "geom" ON "ln2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln2d_geom_update2"
AFTER UPDATE OF "geom" ON "ln2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_ln2d_geom_update3"
AFTER UPDATE OF "geom" ON "ln2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_ln2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln2d_geom_update4"
AFTER UPDATE ON "ln2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_ln2d_geom_delete"
AFTER DELETE ON "ln2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_ln2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_ln2dm_geom"
BEFORE INSERT ON "ln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_ln2dm_geom"
BEFORE UPDATE OF "geom" ON "ln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_ln2dm_geom"
BEFORE INSERT ON "ln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_ln2dm_geom"
BEFORE UPDATE OF "geom" ON "ln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_ln2dm_geom_insert"
AFTER INSERT ON "ln2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln2dm_geom_update1"
AFTER UPDATE OF "geom" ON "ln2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln2dm_geom_update2"
AFTER UPDATE OF "geom" ON "ln2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_ln2dm_geom_update3"
AFTER UPDATE OF "geom" ON "ln2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_ln2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln2dm_geom_update4"
AFTER UPDATE ON "ln2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_ln2dm_geom_delete"
AFTER DELETE ON "ln2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_ln2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_ln3dz_geom"
BEFORE INSERT ON "ln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_ln3dz_geom"
BEFORE UPDATE OF "geom" ON "ln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_ln3dz_geom"
BEFORE INSERT ON "ln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_ln3dz_geom"
BEFORE UPDATE OF "geom" ON "ln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_ln3dz_geom_insert"
AFTER INSERT ON "ln3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln3dz_geom_update1"
AFTER UPDATE OF "geom" ON "ln3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln3dz_geom_update2"
AFTER UPDATE OF "geom" ON "ln3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_ln3dz_geom_update3"
AFTER UPDATE OF "geom" ON "ln3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_ln3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln3dz_geom_update4"
AFTER UPDATE ON "ln3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_ln3dz_geom_delete"
AFTER DELETE ON "ln3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_ln3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_ln3dzm_geom"
BEFORE INSERT ON "ln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_ln3dzm_geom"
BEFORE UPDATE OF "geom" ON "ln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_ln3dzm_geom"
BEFORE INSERT ON "ln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "ln3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_ln3dzm_geom"
BEFORE UPDATE OF "geom" ON "ln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "ln3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_ln3dzm_geom_insert"
AFTER INSERT ON "ln3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "ln3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_ln3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "ln3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_ln3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "ln3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_ln3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_ln3dzm_geom_update4"
AFTER UPDATE ON "ln3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_ln3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_ln3dzm_geom_delete"
AFTER DELETE ON "ln3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_ln3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_pg2d_geom"
BEFORE INSERT ON "pg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pg2d_geom"
BEFORE UPDATE OF "geom" ON "pg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pg2d_geom"
BEFORE INSERT ON "pg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pg2d_geom"
BEFORE UPDATE OF "geom" ON "pg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pg2d_geom_insert"
AFTER INSERT ON "pg2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg2d_geom_update1"
AFTER UPDATE OF "geom" ON "pg2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg2d_geom_update2"
AFTER UPDATE OF "geom" ON "pg2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pg2d_geom_update3"
AFTER UPDATE OF "geom" ON "pg2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pg2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg2d_geom_update4"
AFTER UPDATE ON "pg2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pg2d_geom_delete"
AFTER DELETE ON "pg2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pg2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_pg2dm_geom"
BEFORE INSERT ON "pg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pg2dm_geom"
BEFORE UPDATE OF "geom" ON "pg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pg2dm_geom"
BEFORE INSERT ON "pg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pg2dm_geom"
BEFORE UPDATE OF "geom" ON "pg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pg2dm_geom_insert"
AFTER INSERT ON "pg2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg2dm_geom_update1"
AFTER UPDATE OF "geom" ON "pg2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg2dm_geom_update2"
AFTER UPDATE OF "geom" ON "pg2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pg2dm_geom_update3"
AFTER UPDATE OF "geom" ON "pg2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pg2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg2dm_geom_update4"
AFTER UPDATE ON "pg2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pg2dm_geom_delete"
AFTER DELETE ON "pg2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pg2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_pg3dz_geom"
BEFORE INSERT ON "pg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pg3dz_geom"
BEFORE UPDATE OF "geom" ON "pg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pg3dz_geom"
BEFORE INSERT ON "pg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pg3dz_geom"
BEFORE UPDATE OF "geom" ON "pg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pg3dz_geom_insert"
AFTER INSERT ON "pg3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg3dz_geom_update1"
AFTER UPDATE OF "geom" ON "pg3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg3dz_geom_update2"
AFTER UPDATE OF "geom" ON "pg3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pg3dz_geom_update3"
AFTER UPDATE OF "geom" ON "pg3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pg3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg3dz_geom_update4"
AFTER UPDATE ON "pg3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pg3dz_geom_delete"
AFTER DELETE ON "pg3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pg3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_pg3dzm_geom"
BEFORE INSERT ON "pg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_pg3dzm_geom"
BEFORE UPDATE OF "geom" ON "pg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_pg3dzm_geom"
BEFORE INSERT ON "pg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "pg3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_pg3dzm_geom"
BEFORE UPDATE OF "geom" ON "pg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "pg3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_pg3dzm_geom_insert"
AFTER INSERT ON "pg3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "pg3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_pg3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "pg3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_pg3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "pg3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_pg3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_pg3dzm_geom_update4"
AFTER UPDATE ON "pg3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_pg3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_pg3dzm_geom_delete"
AFTER DELETE ON "pg3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_pg3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpg3dzm_geom"
BEFORE INSERT ON "mpg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpg3dzm_geom"
BEFORE UPDATE OF "geom" ON "mpg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpg3dzm_geom"
BEFORE INSERT ON "mpg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpg3dzm_geom"
BEFORE UPDATE OF "geom" ON "mpg3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpg3dzm_geom_insert"
AFTER INSERT ON "mpg3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "mpg3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "mpg3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpg3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "mpg3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpg3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg3dzm_geom_update4"
AFTER UPDATE ON "mpg3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpg3dzm_geom_delete"
AFTER DELETE ON "mpg3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpg3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpg3dz_geom"
BEFORE INSERT ON "mpg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpg3dz_geom"
BEFORE UPDATE OF "geom" ON "mpg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpg3dz_geom"
BEFORE INSERT ON "mpg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpg3dz_geom"
BEFORE UPDATE OF "geom" ON "mpg3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpg3dz_geom_insert"
AFTER INSERT ON "mpg3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg3dz_geom_update1"
AFTER UPDATE OF "geom" ON "mpg3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg3dz_geom_update2"
AFTER UPDATE OF "geom" ON "mpg3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpg3dz_geom_update3"
AFTER UPDATE OF "geom" ON "mpg3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpg3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg3dz_geom_update4"
AFTER UPDATE ON "mpg3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpg3dz_geom_delete"
AFTER DELETE ON "mpg3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpg3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpg2dm_geom"
BEFORE INSERT ON "mpg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpg2dm_geom"
BEFORE UPDATE OF "geom" ON "mpg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpg2dm_geom"
BEFORE INSERT ON "mpg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpg2dm_geom"
BEFORE UPDATE OF "geom" ON "mpg2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpg2dm_geom_insert"
AFTER INSERT ON "mpg2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg2dm_geom_update1"
AFTER UPDATE OF "geom" ON "mpg2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg2dm_geom_update2"
AFTER UPDATE OF "geom" ON "mpg2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpg2dm_geom_update3"
AFTER UPDATE OF "geom" ON "mpg2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpg2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg2dm_geom_update4"
AFTER UPDATE ON "mpg2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpg2dm_geom_delete"
AFTER DELETE ON "mpg2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpg2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpg2d_geom"
BEFORE INSERT ON "mpg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpg2d_geom"
BEFORE UPDATE OF "geom" ON "mpg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpg2d_geom"
BEFORE INSERT ON "mpg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpg2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpg2d_geom"
BEFORE UPDATE OF "geom" ON "mpg2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpg2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpg2d_geom_insert"
AFTER INSERT ON "mpg2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg2d_geom_update1"
AFTER UPDATE OF "geom" ON "mpg2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpg2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg2d_geom_update2"
AFTER UPDATE OF "geom" ON "mpg2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpg2d_geom_update3"
AFTER UPDATE OF "geom" ON "mpg2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpg2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpg2d_geom_update4"
AFTER UPDATE ON "mpg2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpg2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpg2d_geom_delete"
AFTER DELETE ON "mpg2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpg2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mln2d_geom"
BEFORE INSERT ON "mln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mln2d_geom"
BEFORE UPDATE OF "geom" ON "mln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mln2d_geom"
BEFORE INSERT ON "mln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mln2d_geom"
BEFORE UPDATE OF "geom" ON "mln2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mln2d_geom_insert"
AFTER INSERT ON "mln2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln2d_geom_update1"
AFTER UPDATE OF "geom" ON "mln2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln2d_geom_update2"
AFTER UPDATE OF "geom" ON "mln2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mln2d_geom_update3"
AFTER UPDATE OF "geom" ON "mln2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mln2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln2d_geom_update4"
AFTER UPDATE ON "mln2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mln2d_geom_delete"
AFTER DELETE ON "mln2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mln2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mln2dm_geom"
BEFORE INSERT ON "mln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mln2dm_geom"
BEFORE UPDATE OF "geom" ON "mln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mln2dm_geom"
BEFORE INSERT ON "mln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mln2dm_geom"
BEFORE UPDATE OF "geom" ON "mln2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mln2dm_geom_insert"
AFTER INSERT ON "mln2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln2dm_geom_update1"
AFTER UPDATE OF "geom" ON "mln2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln2dm_geom_update2"
AFTER UPDATE OF "geom" ON "mln2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mln2dm_geom_update3"
AFTER UPDATE OF "geom" ON "mln2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mln2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln2dm_geom_update4"
AFTER UPDATE ON "mln2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mln2dm_geom_delete"
AFTER DELETE ON "mln2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mln2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mln3dz_geom"
BEFORE INSERT ON "mln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mln3dz_geom"
BEFORE UPDATE OF "geom" ON "mln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mln3dz_geom"
BEFORE INSERT ON "mln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mln3dz_geom"
BEFORE UPDATE OF "geom" ON "mln3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mln3dz_geom_insert"
AFTER INSERT ON "mln3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln3dz_geom_update1"
AFTER UPDATE OF "geom" ON "mln3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln3dz_geom_update2"
AFTER UPDATE OF "geom" ON "mln3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mln3dz_geom_update3"
AFTER UPDATE OF "geom" ON "mln3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mln3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln3dz_geom_update4"
AFTER UPDATE ON "mln3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mln3dz_geom_delete"
AFTER DELETE ON "mln3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mln3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mln3dzm_geom"
BEFORE INSERT ON "mln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mln3dzm_geom"
BEFORE UPDATE OF "geom" ON "mln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mln3dzm_geom"
BEFORE INSERT ON "mln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mln3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mln3dzm_geom"
BEFORE UPDATE OF "geom" ON "mln3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mln3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mln3dzm_geom_insert"
AFTER INSERT ON "mln3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "mln3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mln3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "mln3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mln3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "mln3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mln3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mln3dzm_geom_update4"
AFTER UPDATE ON "mln3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mln3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mln3dzm_geom_delete"
AFTER DELETE ON "mln3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mln3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpt3dzm_geom"
BEFORE INSERT ON "mpt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpt3dzm_geom"
BEFORE UPDATE OF "geom" ON "mpt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpt3dzm_geom"
BEFORE INSERT ON "mpt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpt3dzm_geom"
BEFORE UPDATE OF "geom" ON "mpt3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpt3dzm_geom_insert"
AFTER INSERT ON "mpt3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "mpt3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "mpt3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpt3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "mpt3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpt3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt3dzm_geom_update4"
AFTER UPDATE ON "mpt3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpt3dzm_geom_delete"
AFTER DELETE ON "mpt3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpt3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpt3dz_geom"
BEFORE INSERT ON "mpt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpt3dz_geom"
BEFORE UPDATE OF "geom" ON "mpt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpt3dz_geom"
BEFORE INSERT ON "mpt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpt3dz_geom"
BEFORE UPDATE OF "geom" ON "mpt3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpt3dz_geom_insert"
AFTER INSERT ON "mpt3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt3dz_geom_update1"
AFTER UPDATE OF "geom" ON "mpt3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt3dz_geom_update2"
AFTER UPDATE OF "geom" ON "mpt3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpt3dz_geom_update3"
AFTER UPDATE OF "geom" ON "mpt3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpt3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt3dz_geom_update4"
AFTER UPDATE ON "mpt3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpt3dz_geom_delete"
AFTER DELETE ON "mpt3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpt3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpt2dm_geom"
BEFORE INSERT ON "mpt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpt2dm_geom"
BEFORE UPDATE OF "geom" ON "mpt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpt2dm_geom"
BEFORE INSERT ON "mpt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpt2dm_geom"
BEFORE UPDATE OF "geom" ON "mpt2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpt2dm_geom_insert"
AFTER INSERT ON "mpt2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt2dm_geom_update1"
AFTER UPDATE OF "geom" ON "mpt2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt2dm_geom_update2"
AFTER UPDATE OF "geom" ON "mpt2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpt2dm_geom_update3"
AFTER UPDATE OF "geom" ON "mpt2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpt2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt2dm_geom_update4"
AFTER UPDATE ON "mpt2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpt2dm_geom_delete"
AFTER DELETE ON "mpt2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpt2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_mpt2d_geom"
BEFORE INSERT ON "mpt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_mpt2d_geom"
BEFORE UPDATE OF "geom" ON "mpt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_mpt2d_geom"
BEFORE INSERT ON "mpt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "mpt2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_mpt2d_geom"
BEFORE UPDATE OF "geom" ON "mpt2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "mpt2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_mpt2d_geom_insert"
AFTER INSERT ON "mpt2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt2d_geom_update1"
AFTER UPDATE OF "geom" ON "mpt2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_mpt2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt2d_geom_update2"
AFTER UPDATE OF "geom" ON "mpt2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_mpt2d_geom_update3"
AFTER UPDATE OF "geom" ON "mpt2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_mpt2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_mpt2d_geom_update4"
AFTER UPDATE ON "mpt2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_mpt2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_mpt2d_geom_delete"
AFTER DELETE ON "mpt2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_mpt2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_gc2d_geom"
BEFORE INSERT ON "gc2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_gc2d_geom"
BEFORE UPDATE OF "geom" ON "gc2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_gc2d_geom"
BEFORE INSERT ON "gc2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_gc2d_geom"
BEFORE UPDATE OF "geom" ON "gc2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_gc2d_geom_insert"
AFTER INSERT ON "gc2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc2d_geom_update1"
AFTER UPDATE OF "geom" ON "gc2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc2d_geom_update2"
AFTER UPDATE OF "geom" ON "gc2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_gc2d_geom_update3"
AFTER UPDATE OF "geom" ON "gc2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_gc2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc2d_geom_update4"
AFTER UPDATE ON "gc2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_gc2d_geom_delete"
AFTER DELETE ON "gc2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_gc2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_gc2dm_geom"
BEFORE INSERT ON "gc2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_gc2dm_geom"
BEFORE UPDATE OF "geom" ON "gc2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_gc2dm_geom"
BEFORE INSERT ON "gc2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_gc2dm_geom"
BEFORE UPDATE OF "geom" ON "gc2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_gc2dm_geom_insert"
AFTER INSERT ON "gc2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc2dm_geom_update1"
AFTER UPDATE OF "geom" ON "gc2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc2dm_geom_update2"
AFTER UPDATE OF "geom" ON "gc2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_gc2dm_geom_update3"
AFTER UPDATE OF "geom" ON "gc2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_gc2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc2dm_geom_update4"
AFTER UPDATE ON "gc2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_gc2dm_geom_delete"
AFTER DELETE ON "gc2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_gc2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_gc3dz_geom"
BEFORE INSERT ON "gc3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_gc3dz_geom"
BEFORE UPDATE OF "geom" ON "gc3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_gc3dz_geom"
BEFORE INSERT ON "gc3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_gc3dz_geom"
BEFORE UPDATE OF "geom" ON "gc3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_gc3dz_geom_insert"
AFTER INSERT ON "gc3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc3dz_geom_update1"
AFTER UPDATE OF "geom" ON "gc3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc3dz_geom_update2"
AFTER UPDATE OF "geom" ON "gc3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_gc3dz_geom_update3"
AFTER UPDATE OF "geom" ON "gc3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_gc3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc3dz_geom_update4"
AFTER UPDATE ON "gc3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_gc3dz_geom_delete"
AFTER DELETE ON "gc3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_gc3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_gc3dzm_geom"
BEFORE INSERT ON "gc3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_gc3dzm_geom"
BEFORE UPDATE OF "geom" ON "gc3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_gc3dzm_geom"
BEFORE INSERT ON "gc3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "gc3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_gc3dzm_geom"
BEFORE UPDATE OF "geom" ON "gc3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "gc3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_gc3dzm_geom_insert"
AFTER INSERT ON "gc3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "gc3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_gc3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "gc3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_gc3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "gc3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_gc3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_gc3dzm_geom_update4"
AFTER UPDATE ON "gc3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_gc3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_gc3dzm_geom_delete"
AFTER DELETE ON "gc3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_gc3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_geo3dzm_geom"
BEFORE INSERT ON "geo3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo3dzm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_geo3dzm_geom"
BEFORE UPDATE OF "geom" ON "geo3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo3dzm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_geo3dzm_geom"
BEFORE INSERT ON "geo3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo3dzm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_geo3dzm_geom"
BEFORE UPDATE OF "geom" ON "geo3dzm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo3dzm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_geo3dzm_geom_insert"
AFTER INSERT ON "geo3dzm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo3dzm_geom_update1"
AFTER UPDATE OF "geom" ON "geo3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo3dzm_geom_update2"
AFTER UPDATE OF "geom" ON "geo3dzm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_geo3dzm_geom_update3"
AFTER UPDATE OF "geom" ON "geo3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo3dzm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_geo3dzm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo3dzm_geom_update4"
AFTER UPDATE ON "geo3dzm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo3dzm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_geo3dzm_geom_delete"
AFTER DELETE ON "geo3dzm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_geo3dzm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_geo3dz_geom"
BEFORE INSERT ON "geo3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo3dz" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_geo3dz_geom"
BEFORE UPDATE OF "geom" ON "geo3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo3dz" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_geo3dz_geom"
BEFORE INSERT ON "geo3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo3dz" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_geo3dz_geom"
BEFORE UPDATE OF "geom" ON "geo3dz"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo3dz" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_geo3dz_geom_insert"
AFTER INSERT ON "geo3dz"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo3dz_geom_update1"
AFTER UPDATE OF "geom" ON "geo3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo3dz_geom_update2"
AFTER UPDATE OF "geom" ON "geo3dz"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_geo3dz_geom_update3"
AFTER UPDATE OF "geom" ON "geo3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo3dz_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_geo3dz_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo3dz_geom_update4"
AFTER UPDATE ON "geo3dz"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo3dz_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_geo3dz_geom_delete"
AFTER DELETE ON "geo3dz"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_geo3dz_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_geo2dm_geom"
BEFORE INSERT ON "geo2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo2dm" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_geo2dm_geom"
BEFORE UPDATE OF "geom" ON "geo2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo2dm" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_geo2dm_geom"
BEFORE INSERT ON "geo2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo2dm" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_geo2dm_geom"
BEFORE UPDATE OF "geom" ON "geo2dm"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo2dm" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_geo2dm_geom_insert"
AFTER INSERT ON "geo2dm"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo2dm_geom_update1"
AFTER UPDATE OF "geom" ON "geo2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo2dm_geom_update2"
AFTER UPDATE OF "geom" ON "geo2dm"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_geo2dm_geom_update3"
AFTER UPDATE OF "geom" ON "geo2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo2dm_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_geo2dm_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo2dm_geom_update4"
AFTER UPDATE ON "geo2dm"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo2dm_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_geo2dm_geom_delete"
AFTER DELETE ON "geo2dm"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_geo2dm_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_geo2d_geom"
BEFORE INSERT ON "geo2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo2d" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_geo2d_geom"
BEFORE UPDATE OF "geom" ON "geo2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo2d" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_geo2d_geom"
BEFORE INSERT ON "geo2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "geo2d" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_geo2d_geom"
BEFORE UPDATE OF "geom" ON "geo2d"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "geo2d" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "rtree_geo2d_geom_insert"
AFTER INSERT ON "geo2d"
WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo2d_geom_update1"
AFTER UPDATE OF "geom" ON "geo2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
INSERT OR REPLACE INTO "rtree_geo2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo2d_geom_update2"
AFTER UPDATE OF "geom" ON "geo2d"
WHEN OLD.ROWID = NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "rtree_geo2d_geom_update3"
AFTER UPDATE OF "geom" ON "geo2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo2d_geom" WHERE id = OLD.ROWID;
INSERT OR REPLACE INTO "rtree_geo2d_geom" VALUES (NEW.ROWID, ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom"));
END;
CREATE TRIGGER "rtree_geo2d_geom_update4"
AFTER UPDATE ON "geo2d"
WHEN OLD.ROWID != NEW.ROWID AND (NEW."geom" IS NULL OR ST_IsEmpty(NEW."geom"))
BEGIN
DELETE FROM "rtree_geo2d_geom" WHERE id IN (OLD.ROWID, NEW.ROWID);
END;
CREATE TRIGGER "rtree_geo2d_geom_delete"
AFTER DELETE ON "geo2d"WHEN old."geom" NOT NULL
BEGIN
DELETE FROM "rtree_geo2d_geom" WHERE id = OLD.ROWID;
END;
CREATE TRIGGER "fgti_test_pk_geom"
BEFORE INSERT ON "test_pk"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "test_pk" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom')
AND Lower(column_name) = Lower('geom')
AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgtu_test_pk_geom"
BEFORE UPDATE OF "geom" ON "test_pk"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "test_pk" on "geom" violates constraint: ST_GeometryType("geom") is not assignable from gpkg_geometry_columns.geometry_type_name value')
WHERE (SELECT geometry_type_name
FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND gpkg_IsAssignable(geometry_type_name, ST_GeometryType(NEW."geom")) = 0);
END;
CREATE TRIGGER "fgsi_test_pk_geom"
BEFORE INSERT ON "test_pk"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'insert on "test_pk" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
CREATE TRIGGER "fgsu_test_pk_geom"
BEFORE UPDATE OF "geom" ON "test_pk"
FOR EACH ROW BEGIN
SELECT RAISE (ROLLBACK, 'update of "test_pk" on "geom" violates constraint: ST_SRID("geom") does not match gpkg_geometry_columns.srs_id value')
WHERE (SELECT srs_id FROM gpkg_geometry_columns
WHERE Lower(table_name) = Lower('geom') AND Lower(column_name) = Lower('geom') AND ST_SRID(NEW."geom") <> srs_id);
END;
PRAGMA writable_schema=OFF;
COMMIT;
